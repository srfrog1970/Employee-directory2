{"version":3,"sources":["component/Header/header.js","component/Container/container.js","component/SearchBar/searchbar.js","utils/API.js","component/TableMDB/tableMDB.js","App.js","serviceWorker.js","index.js"],"names":["Header","Jumbotron","className","Container","props","fluid","SearchBar","axios","get","data","columns","label","field","sort","width","rows","API","then","randomusers","results","map","userdata","dob","Date","date","toLocaleDateString","console","log","push","name","first","image","picture","thumbnail","email","phone","catch","err","TableMDB","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"kMAgBeA,MAZf,WACE,OACE,kBAACC,EAAA,EAAD,CAAWC,UAAU,eACnB,kDACA,gHCASC,MANf,SAAmBC,GACjB,OACE,uCAAKF,UAAS,mBAAcE,EAAMC,MAAQ,SAAW,KAAUD,K,wBCepDE,I,yDCjBA,EACE,WACb,OAAOC,IAAMC,IAAI,kD,QCCjBC,EAAO,CACTC,QAAS,CACP,CACEC,MAAO,QACPC,MAAO,QACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,OACPC,MAAO,OACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,QACPC,MAAO,QACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,QACPC,MAAO,QACPC,KAAM,MACNC,MAAO,KAET,CACEH,MAAO,MACPC,MAAO,MACPC,KAAM,MACNC,MAAO,MAGXC,KAAM,IAGRC,IACGC,MAAK,SAACC,GACLA,EAAYT,KAAKU,QAAQC,KAAI,SAACC,GAC5B,IAAIC,EAAM,IAAIC,KAAKF,EAASC,IAAIE,MAAMC,mBAAmB,SACzDC,QAAQC,IAAIL,GACZb,EAAKM,KAAKa,KAAK,CACbC,KAAMR,EAASQ,KAAKC,MACpBC,MAAOV,EAASW,QAAQC,UACxBC,MAAOb,EAASa,MAChBC,MAAOd,EAASc,MAChBb,IAAKA,UAIVc,OAAM,SAACC,GAAD,OAASX,QAAQC,IAAIU,M,IAefC,E,uKARX,OAHAZ,QAAQC,IAAI,aACZD,QAAQC,IAAIlB,EAAKM,MACjBW,QAAQC,IAAIlB,EAAKC,SAEf,6BACE,kBAAC,IAAD,CAAcD,KAAMA,S,GAPL8B,aCnCRC,MAdf,WACE,OACE,6BACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MAEA,kBAAC,EAAD,SCFYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdlB,OAAM,SAAAmB,GACL7B,QAAQ6B,MAAMA,EAAMC,a","file":"static/js/main.ab0b46b5.chunk.js","sourcesContent":["import React from \"react\";\r\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\r\nimport \"./header.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <Jumbotron className=\"headerStyle\">\r\n      <h1>Employee Directory</h1>\r\n      <p>\r\n        Click on headers to sort or filter using the search box to narrow your\r\n        results.\r\n      </p>\r\n    </Jumbotron>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\n\nfunction Container(props) {\n  return (\n    <div className={`container${props.fluid ? \"-fluid\" : \"\"}`} {...props} />\n  );\n}\n\nexport default Container;\n","import React from \"react\";\r\nimport InputGroup from \"react-bootstrap/InputGroup\";\r\nimport FormControl from \"react-bootstrap/FormControl\";\r\nimport Container from \"../Container/container\";\r\nimport Row from \"react-bootstrap/Row\";\r\nimport \"./searchbar.css\";\r\n\r\nfunction SearchBar() {\r\n  return (\r\n    <Container>\r\n      <Row className=\"searchBarRow\">\r\n        <InputGroup className=\"searchField\">\r\n          <FormControl placeholder=\"Search\" />\r\n        </InputGroup>\r\n      </Row>\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default SearchBar;\r\n","import axios from \"axios\";\n\nexport default {\n  getRandomUser: function () {\n    return axios.get(\"https://randomuser.me/api/?results=200&nat=us\");\n  },\n};\n","import React, { Component } from \"react\";\r\nimport \"./tableMDB.css\";\r\nimport API from \"../../utils/API\";\r\nimport { MDBDataTable } from \"mdbreact\";\r\n\r\nvar data = {\r\n  columns: [\r\n    {\r\n      label: \"Image\",\r\n      field: \"image\",\r\n      sort: \"asc\",\r\n      width: 150,\r\n    },\r\n    {\r\n      label: \"Name\",\r\n      field: \"name\",\r\n      sort: \"asc\",\r\n      width: 270,\r\n    },\r\n    {\r\n      label: \"Phone\",\r\n      field: \"phone\",\r\n      sort: \"asc\",\r\n      width: 200,\r\n    },\r\n    {\r\n      label: \"Email\",\r\n      field: \"email\",\r\n      sort: \"asc\",\r\n      width: 100,\r\n    },\r\n    {\r\n      label: \"DOB\",\r\n      field: \"dob\",\r\n      sort: \"asc\",\r\n      width: 150,\r\n    },\r\n  ],\r\n  rows: [],\r\n};\r\n\r\nAPI.getRandomUser()\r\n  .then((randomusers) => {\r\n    randomusers.data.results.map((userdata) => {\r\n      var dob = new Date(userdata.dob.date).toLocaleDateString(\"en-US\");\r\n      console.log(dob);\r\n      data.rows.push({\r\n        name: userdata.name.first,\r\n        image: userdata.picture.thumbnail,\r\n        email: userdata.email,\r\n        phone: userdata.phone,\r\n        dob: dob,\r\n      });\r\n    });\r\n  })\r\n  .catch((err) => console.log(err));\r\n\r\nclass TableMDB extends Component {\r\n  render() {\r\n    console.log(\"rendering\");\r\n    console.log(data.rows);\r\n    console.log(data.columns);\r\n    return (\r\n      <div>\r\n        <MDBDataTable data={data} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default TableMDB;\r\n","import React from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport Header from \"./component/Header/header\";\nimport Container from \"./component/Container/container\";\nimport SearchBar from \"./component/SearchBar/searchbar\";\nimport TableMDB from \"./component/TableMDB/tableMDB\";\n// import Table from \"./component/Table/table\";\n\nfunction App() {\n  return (\n    <div>\n      <Container>\n        <Header />\n        {/* <SearchBar /> */}\n        <TableMDB />\n        {/* <Table /> */}\n      </Container>\n    </div>\n    // return <div className=\"App\">Hello World</div>;\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n// import \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById(\"root\")\n// )\nReactDOM.render(<App />, document.getElementById(\"root\"));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}